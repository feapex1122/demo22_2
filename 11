#include <iostream>
#include <vector>
#include <thread>

using namespace std;

const int N = 1000;
const int NUM_THREADS = 4;

vector<vector<int>> A(N, vector<int>(N));
vector<vector<int>> B(N, vector<int>(N));
vector<vector<int>> C(N, vector<int>(N));

void multiply(int start_row, int end_row) {
    for (int i = start_row; i < end_row; ++i) {
        for (int j = 0; j < N; ++j) {
            for (int k = 0; k < N; ++k) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

int main() {
    // Initialize matrices A and B

    // Create threads
    vector<thread> threads;
    int chunk_size = N / NUM_THREADS;
    for (int i = 0; i < NUM_THREADS; ++i) {
        int start_row = i * chunk_size;
        int end_row = (i == NUM_THREADS - 1) ? N : (i + 1) * chunk_size;
        threads.emplace_back(multiply, start_row, end_row);
    }

    // Join threads
    for (auto& thread : threads) {
        thread.join();
    }

    // Output matrix C

    return 0;
}
